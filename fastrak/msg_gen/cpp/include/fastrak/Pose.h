/* Auto-generated by genmsg_cpp for file /home/asd/MyRosPack/fastrak/msg/Pose.msg */
#ifndef FASTRAK_MESSAGE_POSE_H
#define FASTRAK_MESSAGE_POSE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "roslib/Header.h"

namespace fastrak
{
template <class ContainerAllocator>
struct Pose_ : public ros::Message
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
  : header()
  , id(0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  , ya(0.0)
  , pi(0.0)
  , ro(0.0)
  {
  }

  Pose_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , id(0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  , ya(0.0)
  , pi(0.0)
  , ro(0.0)
  {
  }

  typedef  ::roslib::Header_<ContainerAllocator>  _header_type;
   ::roslib::Header_<ContainerAllocator>  header;

  typedef uint8_t _id_type;
  uint8_t id;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _z_type;
  double z;

  typedef double _ya_type;
  double ya;

  typedef double _pi_type;
  double pi;

  typedef double _ro_type;
  double ro;


private:
  static const char* __s_getDataType_() { return "fastrak/Pose"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6ca806a9c2380f670da316009aa5faaa"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "#\n\
# Message for the state of the fastrak. \n\
#\n\
Header  header         # header\n\
uint8   id             # station number\n\
float64 x              #  \n\
float64 y              # \n\
float64 z              # \n\
float64 ya             # yaw\n\
float64 pi             # pitch\n\
float64 ro             # roll\n\
\n\
\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, id);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, z);
    ros::serialization::serialize(stream, ya);
    ros::serialization::serialize(stream, pi);
    ros::serialization::serialize(stream, ro);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, id);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, z);
    ros::serialization::deserialize(stream, ya);
    ros::serialization::deserialize(stream, pi);
    ros::serialization::deserialize(stream, ro);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(id);
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(z);
    size += ros::serialization::serializationLength(ya);
    size += ros::serialization::serializationLength(pi);
    size += ros::serialization::serializationLength(ro);
    return size;
  }

  typedef boost::shared_ptr< ::fastrak::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fastrak::Pose_<ContainerAllocator>  const> ConstPtr;
}; // struct Pose
typedef  ::fastrak::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::fastrak::Pose> PosePtr;
typedef boost::shared_ptr< ::fastrak::Pose const> PoseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::fastrak::Pose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::fastrak::Pose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace fastrak

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::fastrak::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6ca806a9c2380f670da316009aa5faaa";
  }

  static const char* value(const  ::fastrak::Pose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6ca806a9c2380f67ULL;
  static const uint64_t static_value2 = 0x0da316009aa5faaaULL;
};

template<class ContainerAllocator>
struct DataType< ::fastrak::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastrak/Pose";
  }

  static const char* value(const  ::fastrak::Pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fastrak::Pose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#\n\
# Message for the state of the fastrak. \n\
#\n\
Header  header         # header\n\
uint8   id             # station number\n\
float64 x              #  \n\
float64 y              # \n\
float64 z              # \n\
float64 ya             # yaw\n\
float64 pi             # pitch\n\
float64 ro             # roll\n\
\n\
\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::fastrak::Pose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::fastrak::Pose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fastrak::Pose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.id);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.ya);
    stream.next(m.pi);
    stream.next(m.ro);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Pose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fastrak::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::fastrak::Pose_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::roslib::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "ya: ";
    Printer<double>::stream(s, indent + "  ", v.ya);
    s << indent << "pi: ";
    Printer<double>::stream(s, indent + "  ", v.pi);
    s << indent << "ro: ";
    Printer<double>::stream(s, indent + "  ", v.ro);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FASTRAK_MESSAGE_POSE_H

