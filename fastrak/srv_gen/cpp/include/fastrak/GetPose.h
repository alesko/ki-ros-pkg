/* Auto-generated by genmsg_cpp for file /home/asd/MyRosPack/fastrak/srv/GetPose.srv */
#ifndef FASTRAK_SERVICE_GETPOSE_H
#define FASTRAK_SERVICE_GETPOSE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace fastrak
{
template <class ContainerAllocator>
struct GetPoseRequest_ : public ros::Message
{
  typedef GetPoseRequest_<ContainerAllocator> Type;

  GetPoseRequest_()
  {
  }

  GetPoseRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "fastrak/GetPoseRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b06e8d830a2510784fab4c15f68df674"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::fastrak::GetPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fastrak::GetPoseRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetPoseRequest
typedef  ::fastrak::GetPoseRequest_<std::allocator<void> > GetPoseRequest;

typedef boost::shared_ptr< ::fastrak::GetPoseRequest> GetPoseRequestPtr;
typedef boost::shared_ptr< ::fastrak::GetPoseRequest const> GetPoseRequestConstPtr;


template <class ContainerAllocator>
struct GetPoseResponse_ : public ros::Message
{
  typedef GetPoseResponse_<ContainerAllocator> Type;

  GetPoseResponse_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , yaw(0.0)
  , pitch(0.0)
  , roll(0.0)
  {
  }

  GetPoseResponse_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , yaw(0.0)
  , pitch(0.0)
  , roll(0.0)
  {
  }

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _z_type;
  double z;

  typedef double _yaw_type;
  double yaw;

  typedef double _pitch_type;
  double pitch;

  typedef double _roll_type;
  double roll;


private:
  static const char* __s_getDataType_() { return "fastrak/GetPoseResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b06e8d830a2510784fab4c15f68df674"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b06e8d830a2510784fab4c15f68df674"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 x\n\
float64 y\n\
float64 z\n\
float64 yaw\n\
float64 pitch\n\
float64 roll\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, z);
    ros::serialization::serialize(stream, yaw);
    ros::serialization::serialize(stream, pitch);
    ros::serialization::serialize(stream, roll);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, z);
    ros::serialization::deserialize(stream, yaw);
    ros::serialization::deserialize(stream, pitch);
    ros::serialization::deserialize(stream, roll);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(z);
    size += ros::serialization::serializationLength(yaw);
    size += ros::serialization::serializationLength(pitch);
    size += ros::serialization::serializationLength(roll);
    return size;
  }

  typedef boost::shared_ptr< ::fastrak::GetPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fastrak::GetPoseResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetPoseResponse
typedef  ::fastrak::GetPoseResponse_<std::allocator<void> > GetPoseResponse;

typedef boost::shared_ptr< ::fastrak::GetPoseResponse> GetPoseResponsePtr;
typedef boost::shared_ptr< ::fastrak::GetPoseResponse const> GetPoseResponseConstPtr;

struct GetPose
{

typedef GetPoseRequest Request;
typedef GetPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetPose
} // namespace fastrak

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::fastrak::GetPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::fastrak::GetPoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::fastrak::GetPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastrak/GetPoseRequest";
  }

  static const char* value(const  ::fastrak::GetPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fastrak::GetPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::fastrak::GetPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fastrak::GetPoseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::fastrak::GetPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b06e8d830a2510784fab4c15f68df674";
  }

  static const char* value(const  ::fastrak::GetPoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb06e8d830a251078ULL;
  static const uint64_t static_value2 = 0x4fab4c15f68df674ULL;
};

template<class ContainerAllocator>
struct DataType< ::fastrak::GetPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastrak/GetPoseResponse";
  }

  static const char* value(const  ::fastrak::GetPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fastrak::GetPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 x\n\
float64 y\n\
float64 z\n\
float64 yaw\n\
float64 pitch\n\
float64 roll\n\
\n\
";
  }

  static const char* value(const  ::fastrak::GetPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fastrak::GetPoseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fastrak::GetPoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetPoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fastrak::GetPoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.yaw);
    stream.next(m.pitch);
    stream.next(m.roll);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetPoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<fastrak::GetPose> {
  static const char* value() 
  {
    return "b06e8d830a2510784fab4c15f68df674";
  }

  static const char* value(const fastrak::GetPose&) { return value(); } 
};

template<>
struct DataType<fastrak::GetPose> {
  static const char* value() 
  {
    return "fastrak/GetPose";
  }

  static const char* value(const fastrak::GetPose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fastrak::GetPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b06e8d830a2510784fab4c15f68df674";
  }

  static const char* value(const fastrak::GetPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fastrak::GetPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastrak/GetPose";
  }

  static const char* value(const fastrak::GetPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fastrak::GetPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b06e8d830a2510784fab4c15f68df674";
  }

  static const char* value(const fastrak::GetPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fastrak::GetPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastrak/GetPose";
  }

  static const char* value(const fastrak::GetPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FASTRAK_SERVICE_GETPOSE_H

