/* Auto-generated by genmsg_cpp for file /home/asd/MyRosPack/fastrak/srv/StartPublishing.srv */
#ifndef FASTRAK_SERVICE_STARTPUBLISHING_H
#define FASTRAK_SERVICE_STARTPUBLISHING_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace fastrak
{
template <class ContainerAllocator>
struct StartPublishingRequest_ : public ros::Message
{
  typedef StartPublishingRequest_<ContainerAllocator> Type;

  StartPublishingRequest_()
  : state(false)
  {
  }

  StartPublishingRequest_(const ContainerAllocator& _alloc)
  : state(false)
  {
  }

  typedef uint8_t _state_type;
  uint8_t state;


private:
  static const char* __s_getDataType_() { return "fastrak/StartPublishingRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "001fde3cab9e313a150416ff09c08ee4"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "791bb60874e4f25ba44d61029a5c1beb"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool state\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, state);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, state);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(state);
    return size;
  }

  typedef boost::shared_ptr< ::fastrak::StartPublishingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fastrak::StartPublishingRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct StartPublishingRequest
typedef  ::fastrak::StartPublishingRequest_<std::allocator<void> > StartPublishingRequest;

typedef boost::shared_ptr< ::fastrak::StartPublishingRequest> StartPublishingRequestPtr;
typedef boost::shared_ptr< ::fastrak::StartPublishingRequest const> StartPublishingRequestConstPtr;


template <class ContainerAllocator>
struct StartPublishingResponse_ : public ros::Message
{
  typedef StartPublishingResponse_<ContainerAllocator> Type;

  StartPublishingResponse_()
  : state(false)
  {
  }

  StartPublishingResponse_(const ContainerAllocator& _alloc)
  : state(false)
  {
  }

  typedef uint8_t _state_type;
  uint8_t state;


private:
  static const char* __s_getDataType_() { return "fastrak/StartPublishingResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "001fde3cab9e313a150416ff09c08ee4"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "791bb60874e4f25ba44d61029a5c1beb"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool state\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, state);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, state);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(state);
    return size;
  }

  typedef boost::shared_ptr< ::fastrak::StartPublishingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fastrak::StartPublishingResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct StartPublishingResponse
typedef  ::fastrak::StartPublishingResponse_<std::allocator<void> > StartPublishingResponse;

typedef boost::shared_ptr< ::fastrak::StartPublishingResponse> StartPublishingResponsePtr;
typedef boost::shared_ptr< ::fastrak::StartPublishingResponse const> StartPublishingResponseConstPtr;

struct StartPublishing
{

typedef StartPublishingRequest Request;
typedef StartPublishingResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StartPublishing
} // namespace fastrak

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::fastrak::StartPublishingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "001fde3cab9e313a150416ff09c08ee4";
  }

  static const char* value(const  ::fastrak::StartPublishingRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x001fde3cab9e313aULL;
  static const uint64_t static_value2 = 0x150416ff09c08ee4ULL;
};

template<class ContainerAllocator>
struct DataType< ::fastrak::StartPublishingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastrak/StartPublishingRequest";
  }

  static const char* value(const  ::fastrak::StartPublishingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fastrak::StartPublishingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool state\n\
\n\
";
  }

  static const char* value(const  ::fastrak::StartPublishingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fastrak::StartPublishingRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::fastrak::StartPublishingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "001fde3cab9e313a150416ff09c08ee4";
  }

  static const char* value(const  ::fastrak::StartPublishingResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x001fde3cab9e313aULL;
  static const uint64_t static_value2 = 0x150416ff09c08ee4ULL;
};

template<class ContainerAllocator>
struct DataType< ::fastrak::StartPublishingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastrak/StartPublishingResponse";
  }

  static const char* value(const  ::fastrak::StartPublishingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::fastrak::StartPublishingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool state\n\
\n\
";
  }

  static const char* value(const  ::fastrak::StartPublishingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::fastrak::StartPublishingResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fastrak::StartPublishingRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartPublishingRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::fastrak::StartPublishingResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartPublishingResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<fastrak::StartPublishing> {
  static const char* value() 
  {
    return "791bb60874e4f25ba44d61029a5c1beb";
  }

  static const char* value(const fastrak::StartPublishing&) { return value(); } 
};

template<>
struct DataType<fastrak::StartPublishing> {
  static const char* value() 
  {
    return "fastrak/StartPublishing";
  }

  static const char* value(const fastrak::StartPublishing&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fastrak::StartPublishingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "791bb60874e4f25ba44d61029a5c1beb";
  }

  static const char* value(const fastrak::StartPublishingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fastrak::StartPublishingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastrak/StartPublishing";
  }

  static const char* value(const fastrak::StartPublishingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<fastrak::StartPublishingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "791bb60874e4f25ba44d61029a5c1beb";
  }

  static const char* value(const fastrak::StartPublishingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<fastrak::StartPublishingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fastrak/StartPublishing";
  }

  static const char* value(const fastrak::StartPublishingResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // FASTRAK_SERVICE_STARTPUBLISHING_H

